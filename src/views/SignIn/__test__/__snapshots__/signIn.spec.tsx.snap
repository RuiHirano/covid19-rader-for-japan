// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`スクリーンショットテスト Snapshot of <BackButton /> 1`] = `
<WithStyles(ForwardRef(IconButton))
  onClick={[MockFunction]}
>
  <ArrowBackIcon />
</WithStyles(ForwardRef(IconButton))>
`;

exports[`スクリーンショットテスト Snapshot of <EmailField /> 1`] = `
<WithStyles(ForwardRef(TextField))
  className="makeStyles-textField-21"
  error={false}
  fullWidth={true}
  helperText={null}
  label="Email"
  name="Email"
  type="text"
  value=""
  variant="outlined"
/>
`;

exports[`スクリーンショットテスト Snapshot of <ImageField /> 1`] = `
<div
  className="makeStyles-quote-24"
>
  <div
    className="makeStyles-quoteInner-25"
  >
    <WithStyles(ForwardRef(Typography))
      className="makeStyles-quoteText-26"
      variant="h1"
    >
      Hella narwhal Cosby sweater McSweeney's, salvia kitsch before they sold out High Life.
    </WithStyles(ForwardRef(Typography))>
    <div>
      <WithStyles(ForwardRef(Typography))
        className="makeStyles-name-27"
        variant="body1"
      >
        Takamaru Ayako
      </WithStyles(ForwardRef(Typography))>
      <WithStyles(ForwardRef(Typography))
        className="makeStyles-bio-28"
        variant="body2"
      >
        Manager at inVision
      </WithStyles(ForwardRef(Typography))>
    </div>
  </div>
</div>
`;

exports[`スクリーンショットテスト Snapshot of <PasswordField /> 1`] = `
<WithStyles(ForwardRef(TextField))
  className="makeStyles-textField-22"
  error={false}
  fullWidth={true}
  helperText={null}
  label="Password"
  name="Password"
  type="password"
  value=""
  variant="outlined"
/>
`;

exports[`スクリーンショットテスト Snapshot of <SignIn /> 1`] = `
<div
  className="makeStyles-root-1"
>
  <WithStyles(ForwardRef(Grid))
    className="makeStyles-grid-2"
    container={true}
  >
    <WithStyles(ForwardRef(Grid))
      className="makeStyles-quoteContainer-3"
      item={true}
      lg={5}
    >
      <ImageField />
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      className="makeStyles-content-10"
      item={true}
      lg={7}
      xs={12}
    >
      <div
        className="makeStyles-contentHeader-11"
      >
        <BackButton
          handleBack={[MockFunction]}
        />
      </div>
      <div
        className="makeStyles-contentBody-13"
      >
        <SignInForm
          handleSignIn={[MockFunction]}
        />
      </div>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</div>
`;

exports[`スクリーンショットテスト Snapshot of <SignInContainer /> 1`] = `
<ContextConsumer>
  <Component />
</ContextConsumer>
`;

exports[`スクリーンショットテスト Snapshot of <SignInForm /> 1`] = `
<Formik
  initialValues={
    Object {
      "email": "",
      "password": "",
    }
  }
  onSubmit={[Function]}
  validationSchema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": undefined,
      "_nodes": Array [
        "password",
        "email",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "email": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "required": true,
            "undefined": false,
          },
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        },
        "password": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "min": true,
            "required": true,
            "undefined": false,
          },
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
    }
  }
>
  <Component />
</Formik>
`;

exports[`スクリーンショットテスト Snapshot of <SocialSignIn /> 1`] = `
<div>
  <WithStyles(ForwardRef(Grid))
    className="makeStyles-socialButtons-30"
    container={true}
    spacing={2}
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
    >
      <WithStyles(ForwardRef(Button))
        color="primary"
        onClick={[Function]}
        size="large"
        variant="contained"
      >
        <Facebook
          className="makeStyles-socialIcon-31"
        />
        Login with Facebook
      </WithStyles(ForwardRef(Button))>
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
    >
      <WithStyles(ForwardRef(Button))
        onClick={[Function]}
        size="large"
        variant="contained"
      >
        <Google
          className="makeStyles-socialIcon-31"
        />
        Login with Google
      </WithStyles(ForwardRef(Button))>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
  <WithStyles(ForwardRef(Typography))
    align="center"
    className="makeStyles-sugestion-32"
    color="textSecondary"
    variant="body1"
  >
    or login with email address
  </WithStyles(ForwardRef(Typography))>
</div>
`;

exports[`スクリーンショットテスト Snapshot of <SubmitButton /> 1`] = `
<WithStyles(ForwardRef(Button))
  className="makeStyles-signInButton-33"
  color="primary"
  disabled={false}
  fullWidth={true}
  onClick={[Function]}
  size="large"
  type="submit"
  variant="contained"
>
  Sign up now
</WithStyles(ForwardRef(Button))>
`;

exports[`スクリーンショットテスト Snapshot of <Title /> 1`] = `
<div>
  <WithStyles(ForwardRef(Typography))
    className="makeStyles-title-34"
    variant="h2"
  >
    Sign in
  </WithStyles(ForwardRef(Typography))>
  <WithStyles(ForwardRef(Typography))
    color="textSecondary"
    gutterBottom={true}
  >
    Sign in with social media
  </WithStyles(ForwardRef(Typography))>
</div>
`;

exports[`スクリーンショットテスト Snapshot of <ToSignUp /> 1`] = `
<WithStyles(ForwardRef(Typography))
  color="textSecondary"
  variant="body1"
>
  Don't have an account?
   
  <WithStyles(ForwardRef(Link))
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "displayName": "Link",
        "propTypes": Object {
          "innerRef": [Function],
          "onClick": [Function],
          "replace": [Function],
          "target": [Function],
          "to": [Function],
        },
        "render": [Function],
      }
    }
    to="/sign-up"
    variant="h6"
  >
    Sign up
  </WithStyles(ForwardRef(Link))>
</WithStyles(ForwardRef(Typography))>
`;
